"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('BE_SECRET_KEY')

# Enforce the use of the custom user model
AUTH_USER_MODEL = 'user.User'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Application definition

# [astein:] DO WE NEED ALL OF THEM? THEY CREATE A LOT OF TABLES IN THE DATABASE
# @RAJH: please review :)
INSTALLED_APPS = [
	# Core Django Apps
    'django.contrib.admin', 			# [astein:] needed for migrations
    'django.contrib.auth',
    'django.contrib.contenttypes',		# [astein:] required for the auth app
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
	
	# Third-party Apps
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
	'channels',

	# Custom Apps
    'authentication',
    'user.apps.UserConfig',
    'chat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

CORS_ALLOWED_ORIGINS = [f'https://{domain}' for domain in ALLOWED_HOSTS]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# This is for HTTP requests
WSGI_APPLICATION = 'app.wsgi.application'

# We need this for DJANGO CHANNELS!
ASGI_APPLICATION = 'app.asgi.application'

# This is the default channel layer configuration #TODO change it to redis later
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
		'OPTIONS': {
			'options': '-c search_path=barelyaschema'
		},
		'ENGINE' : 'django.db.backends.postgresql_psycopg2',
		'NAME' : os.environ.get('BE_DB_NAME'),
		'USER' : os.environ.get('BE_DB_USER'),
		'PASSWORD' : os.environ.get('BE_DB_PSWD'),
		'HOST' : os.getenv('BE_DB_HOST'),
		'PORT' : os.environ.get('BE_DB_PORT'),
    }
}

# Media for the user profile pictures aka avatars
MEDIA_ROOT = '/' + os.getenv('MEDIA_VOLUME_NAME', 'media-volume')
MEDIA_URL = '/media/'  # URL prefix for media files

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Mulitlang section below:
# ==============================================================================
# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True # [astein:] for internationalization
USE_L10N = True # [astein:] for localization (formats dates, numbers, etc., based on locale)
USE_TZ = True	# [astein:] for timezone support

# Supported languages | NOTE: Django works with lowercase language codes!
LANGUAGES = [
    ('en-us', ('English (US)')),            # English (United States)
    ('pt-pt', ('Portuguese (Portugal)')),   # Portuguese (Portugal)
    ('pt-br', ('Portuguese (Brazil)')),     # Portuguese (Brazil)
    ('de-de', ('German (Germany)')),        # German (Germany)
    ('uk-ua', ('Ukrainian (Ukraine)')),     # Ukrainian (Ukraine)
    ('ne-np', ('Nepali (Nepal)'))           # Nepali (Nepal)
]

# Path for Locale Files
LOCALE_PATHS = [
    BASE_DIR / 'locale',  # Ensure this directory exists
]

# ==============================================================================

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=130), # temporary for development
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    
}
