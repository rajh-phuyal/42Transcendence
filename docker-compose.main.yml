# This is the configuration for all docker services we use to stay:
# BARELY ALIVE
services:
  # postgres database
  db:
    container_name: db
    image: db:latest
    build:
      context: ./Database/Postgres
      dockerfile: postgres.dockerfile
    environment:
      DB_NAME : $DB_NAME
      POSTGRES_USER : $DB_USER      #POSTGRES_USER is the default var name for the user and can not be changed
      POSTGRES_PASSWORD : $DB_PSWD  #POSTGRES_PASSWORD is the default var name for the password and can not be changed
    volumes:
      - db-volume:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgadmin
  pa:
    container_name: pa
    image: pa:latest
    build:
      context: ./Database/PgAdmin
      dockerfile: pgadmin.dockerfile
      args:
        PA_DB_NAME : $PA_DB_NAME
        PA_DB_PORT : $PA_DB_PORT
        PA_DB_USER : $PA_DB_USER
        PA_DB_PSWD : $PA_DB_PSWD
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL : $PA_MAIL
      PGADMIN_DEFAULT_PASSWORD : $PA_PSWD
      DOMAIN_NAMES : $DOMAIN_NAMES
    volumes:
      - pa-volume:/var/lib/pgadmin
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "/tools/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 30s

  # django backend
  be:
    container_name: be
    image: be:latest
    build:
      context: ./Backend
      dockerfile: django.dockerfile
    depends_on:
      mb:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      LOCAL_DEPLOY            : $LOCAL_DEPLOY
      BE_DB_HOST              : db
      BE_DB_PORT              : $BE_DB_PORT
      BE_DB_NAME              : $BE_DB_NAME
      BE_DB_USER              : $BE_DB_USER
      BE_DB_PSWD              : $BE_DB_PSWD
      BE_SECRET_KEY           : $BE_SECRET_KEY
      DJANGO_SETTINGS_MODULE  : app.settings
      DJANGO_ALLOWED_HOSTS    : $DOMAIN_NAMES
      MEDIA_VOLUME_NAME       : $MEDIA_VOLUME_NAME
      REDIS_PORT              : $REDIS_PORT
    volumes:
      - media-volume:/$MEDIA_VOLUME_NAME
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python ./app/manage.py check >> /tmp/healthcheck.log 2>&1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # nginx frontend
  fe:
    container_name: fe
    image: fe:latest
    build:
      context: ./Frontend
      dockerfile: nginx.dockerfile
    depends_on:
      be:
        condition: service_healthy
      pa:
        condition: service_healthy
    environment:
      LOCAL_DEPLOY : $LOCAL_DEPLOY
      DOMAIN_NAMES : $DOMAIN_NAMES
    ports:
      - "80:80"   # For redirecting to https
      - "443:443" # For https
    volumes:
      - media-volume:/media:ro  # Mount as read-only
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "/tools/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Message Broker redis
  mb:
    container_name: mb
    image: mb:latest
    build:
      context: ./MessageBroker
      dockerfile: redis.dockerfile
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  default:
    name: $DOCKER_NETWORK
    driver: bridge

volumes:
  db-volume:
    name: db-volume
    driver_opts:
      type: none
      device: ${VOLUME_ROOT_PATH}${DB_VOLUME_NAME}/
      o: bind
  pa-volume:
    name: pa-volume
    driver_opts:
      type: none
      device: ${VOLUME_ROOT_PATH}${PA_VOLUME_NAME}/
      o: bind
  media-volume:
    name: media-volume
    driver_opts:
      type: none
      device: ${VOLUME_ROOT_PATH}${MEDIA_VOLUME_NAME}/
      o: bind